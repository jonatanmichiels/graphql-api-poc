type Query {
  info: String!
  getClient(id: String!): Client
  getClients: [Client!]!
  getProduct(id: String!): Product
  getProducts: [Product!]!
  getOrder(id: String!): Order
  getOrders: [Order!]!
}

type Mutation {
  createClient(client: CreateClient!, addresses: [CreateAddress!]): Client!
  updateClient(id: String!, client: UpdateClient!): Client!
  deleteClient(id: String!): Client!
  createProduct(product: CreateProduct!): Product!
  updateProduct(id: String!, product: UpdateProduct!): Product!
  deleteProduct(id: String!): Product!
}

type Client {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  birthday: DateTime
  addresses: [Address!]!
  orders: [Order!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

input CreateClient {
  firstName: String!
  lastName: String!
  email: String!
  birthday: DateTime
}

input UpdateClient {
  firstName: String
  lastName: String
  email: String
  birthday: DateTime
}

type Product {
  id: ID!
  name: String!
  code: String!
  price: Float!
  description: String
  orders: [Order!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

input CreateProduct {
  name: String!
  code: String!
  price: Float!
  description: String
}

input UpdateProduct {
  name: String
  code: String
  price: Float
  description: String
}

type Address {
  id: ID!
  addressLine: String!
  zip: String!
  city: String!
  state: String
  country: String
  isBillingAddress: Boolean
  isShippingAddress: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

input CreateAddress {
  addressLine: String!
  zip: String!
  city: String!
  state: String
  country: String
  isBillingAddress: Boolean
  isShippingAddress: Boolean
}

type Order {
  id: ID!
  client: Client!
  products: [Product!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

scalar DateTime
